#!/bin/sh
# . go_wicci [core-dir] [database] [files-to-edit]...
# source this file to hack on the wicci
#Purpose: setup paths, start postgres, cd to working dir, start emacs

sql_dir=$HOME/SQL

eval `wicci-paths`
. $WICCI_TOOLS_LIB/wicci.sh
[ -n "$simples_sh" ] && . "$simples_sh" # error otherwise???
module_name=go-wicci		# needs to be name of this script!

go_wicci_once=true
while "$go_wicci_once"; do
go_wicci_once=false

simple_require paths || { warn simples ; break; }

go_wicci_path=`which "$module_name"`
[ -f "$go_wicci_path" ] || { warn program path ; break; }

go_wicci_dir="${go_wicci_path%/*}"
go_wicci_lib="$go_wicci_dir"/../Lib/wicci.sh
[ -f "$go_wicci_lib" ] || { warn program lib ; break; }
. "$go_wicci_lib"
for d in /usr/local/SW/pgsql/bin "$WICCI_BIN"; do
	[ -d "$d" ] && pathvar_add PATH -d. -a "$d" ||
		{ warn wicci bin ; break; }
done
		
[ -n "$1" -a -d "$1" ] && { EXPORT WICCI_CORE="$1"; shift; }
cd "$sql_dir" || { warn wicci core ; break; }

[ -n "$1" ] && { EXPORT WICCI_DB_NAME="$1"; shift; }

. pg-control start || { warn pg-control ; }

unset module_name
go_title="Go ${WICCI_DB}  $*"
if type emacs-jgd > /dev/null
then	emacs-jgd "${@:-.}" -title "$go_title"
else		emacs "${@:-.}" -title "$go_title" &
fi

#emacs-jgd "${@:-.}" --fullscreen -title "$go_title" --eval='(subdivide-frame 4)'

done

set +xv
